{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/entities/inventory.js","src/entities/laser.js","src/entities/memory.js","src/entities/player.js","src/entities/stack.js","src/entities/tileSprite.js","src/entities/tiles.js","src/entities/values.js","src/index.js","src/items/addItem.js","src/items/invertItem.js","src/items/item.js","src/items/loadItem.js","src/items/mulItem.js","src/items/pushItem.js","src/items/replaceItem.js","src/items/setItem.js","src/items/subItem.js","src/states/controlsState.js","src/states/creditsState.js","src/states/initState.js","src/states/levelSelectState.js","src/states/levelState.js","src/states/textState.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_setItem","_pushItem","_addItem","_mulItem","_loadItem","_replaceItem","_invertItem","_subItem","ITEM_DISPLAY_ORDER","OPERAND_COLORS","Inventory","game","stack","player","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","items","item_set","_setItem2","default","item_push","_pushItem2","values","positionValue","item_add","_addItem2","item_sub","_subItem2","item_mul","_mulItem2","item_load","_loadItem2","item_replace","_replaceItem2","item_invert","_invertItem2","key","add","setupDescriptionBox","selectedItem","resetItems","onItemChanged","Phaser","Signal","flashing","_this2","operandTweens","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","text","value","tween","to","alpha","Easing","Linear","None","yoyo","onComplete","addOnce","push","_iterator","operandTexts","Symbol","iterator","next","done","err","return","descriptionBox","Group","x","TILE_WIDTH","y","instructionNameText","BitmapText","operandText","tint","itemName","reset","name","count","setTo","item","getItemByIndex","used","use","updateDesciptionText","errorFlash","nextItem","button","old_item","select","dispatch","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","stop","instructionName","numCharacters","operandName","operands","index","itemKey","maxCount","isItemAvailable","selectItem","selectedItemIndex","parseInt","_i","_i2","_tileSprite","Laser","frame","setupAnimation","beams","objectValues","_get","prototype","on","set","watch","_this3","states","directions","forEach","state","direction","animation","animations","play","tileMap","entities","x_dest","y_dest","targetTile","getTile","properties","collidable","ent","tileX","tileY","clearBeams","x_direction","y_direction","check_next","canMove","addBeam","beam","destroy","tileXDest","tileYDest","beamTileX","beamTileY","beamXTile","beamYTile","_tileSprite2","TILE_HEIGHT","addChild","Memory","width","height","memory","j","callbacks","hexCoords","get","Math","floor","cell","v1","v2","callback","MemoryOffset","MemoryCell","baseY","baseX","target","_len","arguments","args","Array","_key","apply","concat","replaceAll","watchAll","_len2","_key2","Player","anchor","moving","lastDirection","DIRECTIONS","position","getIndirect","moveX","moveY","destX","destY","move_constants","start","end","suffix","zeroPad","frameRate","loop","standing_constants","d","addFrames","assign","prefix","settings","frameNames","Animation","generateFrameNames","Stack","stackHeight","stackWidth","inventory","pointerY","pointerX","operandGraphics","pointerGraphics","graphics","beginFill","drawPolygon","endFill","updatePointer","graphic","Graphics","lineStyle","drawRect","offsetCoords","getOffsetCoords","offsetX","offsetY","drawOperandMarkers","currentItem","xPos","yPos","numOperands","_getOffsetCoords","offset","TileSprite","place","Sprite","toHex","high","low","COORDINATES","Tiles","parent","tileLayer","overlayText","setupOverlayText","updateOverlayText","setupOriginalTiles","setupDefaultTileIndices","tile","onTileChanged","originalTiles","bitmapText","defaultTileIndices","tilesetIndex","getTilesetIndex","tileset","tilesets","valueFirsts","tileIndex","tileProperties","_value","newTileIndex","replace","_loop2","overlay","currentAlpha","fadeOut","fadeIn","chain","highlight","toString","toUpperCase","ObjectValues","Values","valuesHeight","valuesWidth","pointer","getCurrentState","levelIndex","createObjectValues","children","getAt","groupName","createValue","label","_initState","_levelState","_textState","_creditsState","_controlsState","_levelSelectState","window","ASSETS","monospaceFontData","monospaceFontImage","slothData","slothImage","tileMapImage","objectsMapImage","getLevelData","GLYPH_NAMES","_window$DIRECTIONS","_defineProperty","Keyboard","UP","RIGHT","DOWN","LEFT","LEVELS","LEVEL_TEXT","Game","AUTO","_initState2","_levelState2","_textState2","_creditsState2","_controlsState2","_levelSelectState2","_item","AddItem","opA","pop","opB","InvertItem","ARC_RADIUS","ARC_CENTRE_X","ARC_CENTRE_Y","ARC_SELECTED_COLOR","ARC_DESELECTED_COLOR","Item","selected","usedGraphics","drawCircle","unusedGraphics","drawUnusedArc","description","from","clear","arc","math","degToRad","visible","_activate","LoadItem","result","MulItem","PushItem","playerPositionValue","ReplaceItem","SetItem","addr","setIndirect","SubItem","ControlsState","menuItems","onEnter","enterKey","input","keyboard","addKey","ENTER","onDown","mKey","M","escapeKey","ESC","State","CreditsState","InitState","renderer","renderSession","roundPixels","Canvas","setImageRenderingCrisp","canvas","stage","backgroundColor","scale","scaleMode","ScaleManager","USER_SCALE","setUserScale","selectedMenuItem","localStorage","getItem","setItem","load","atlas","Loader","TEXTURE_ATLAS_JSON_HASH","bitmapFont","spritesheet","image","audio","music","currentLevel","startText","updateItems","onUp","upKey","wKey","W","downKey","sKey","S","LevelSelectState","onLeft","onRight","leftKey","aKey","A","rightKey","dKey","D","matchesSpec","object","spec","k","_inventory","_memory","_tiles","_player","_stack","_values","_laser","LevelState","tilemap","Tilemap","TILED_JSON","keyQueue","setupKeyQueue","levelGroup","group","_memory2","coordinateText","setupBorderText","setupTileMap","tiles","setupTiles","objectGroup","createSingleObjectSprite","constructor","_player2","lasers","createObjectSprites","_laser2","setPlayerCoordinateTint","_stack2","populateStack","setupInventory","setupItemKeys","bind","selectFirstItem","resetKey","R","event","metaKey","location","reload","paused","checkPlayerTile","movePlayer","updateBeams","number_keys","use_key","useSelectedItem","displayFailMessage","previousItemKey","Q","previousItem","nextItemKey","E","_this4","_tiles2","map","shiftKey","SHIFT","setHighlight","_this5","glyph","startsWith","glyph_value","tilesInMap","getTilesByType","addTilesetImage","createLayer","resizeWorld","type","_inventory2","addItem","_this6","stackValues","split","reverse","stackValue","goToLevel","_text","_this7","cursors","createCursorKeys","wasd","up","down","left","right","keySet","cursor","indexOf","keyCode","splice","options","objects","JSON","stringify","_this8","sprite","gid","property","existing","registerValues","currentKey","getTargetTile","setDirection","move","entity","getAdjacentTile","mapLayerIndex","getLayerIndex","checkMoving","wouldCollide","_this9","skipIntro","title","centerX","centerY","titleWidth","messageGroup","messageBox","messageTitleText","TEXT_START_X","TEXT_START_Y","TextState","currentLevelString","gameText","currentPage","shownText","animating","animatingText","tweens","animatePage","setupKeyboard","active","pageText","splitText","line","ellipsisText","ellipsisTween"],"mappings":"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","file":"index.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import SetItem from '../items/setItem'\nimport PushItem from '../items/pushItem'\nimport AddItem from '../items/addItem'\nimport MulItem from '../items/mulItem'\nimport LoadItem from '../items/loadItem'\nimport ReplaceItem from '../items/replaceItem'\nimport InvertItem from '../items/invertItem'\nimport SubItem from '../items/subItem'\n\nconst ITEM_DISPLAY_ORDER = [\n  'item_set', 'item_push', 'item_add', 'item_sub', 'item_mul', 'item_load', 'item_replace', 'item_invert'\n]\n\nconst OPERAND_COLORS = [\n  0xD63AD4,\n  0x9AD63A\n]\n\nexport default class Inventory extends Phaser.Group {\n  constructor (game, stack, player) {\n    super(game, null, 'Inventory')\n\n    this.items = {\n      'item_set': new SetItem(this.game, stack),\n      'item_push': new PushItem(this.game, stack, player.values.positionValue),\n      'item_add': new AddItem(this.game, stack),\n      'item_sub': new SubItem(this.game, stack),\n      'item_mul': new MulItem(this.game, stack),\n      'item_load': new LoadItem(this.game, stack),\n      'item_replace': new ReplaceItem(this.game, stack),\n      'item_invert': new InvertItem(this.game, stack)\n    }\n\n    for (let key in this.items) {\n      this.add(this.items[key])\n    }\n\n    this.setupDescriptionBox()\n\n    this.selectedItem = 0\n\n    this.resetItems()\n\n    this.onItemChanged = new Phaser.Signal()\n    this.flashing = false\n  }\n\n  errorFlash () {\n    if (this.flashing) {\n      return\n    }\n\n    this.flashing = true\n    this.operandTweens = []\n\n    for (let text of this.operandTexts) {\n      const tween = this.game.add.tween(text)\n\n      tween.to({alpha: 0}, 150, Phaser.Easing.Linear.None, true, 0, 1)\n        .yoyo(true)\n        .onComplete.addOnce(() => {\n          this.flashing = false\n          text.alpha = 1\n        })\n\n      this.operandTweens.push(tween)\n    }\n  }\n\n  setupDescriptionBox () {\n    this.descriptionBox = new Phaser.Group(this.game, this, 'descriptionBox')\n    this.descriptionBox.x = (ITEM_DISPLAY_ORDER.length + 1) * TILE_WIDTH\n    this.descriptionBox.y = 5\n\n    this.instructionNameText = new Phaser.BitmapText(this.game, 0, 0, 'monospace', '', 9)\n    this.descriptionBox.add(this.instructionNameText)\n\n    this.operandTexts = []\n    this.operandTweens = []\n    for (let i = 0; i < 2; i++) {\n      const operandText = new Phaser.BitmapText(this.game, 0, 0, 'monospace', '', 9)\n      operandText.tint = OPERAND_COLORS[i]\n\n      this.descriptionBox.add(operandText)\n      this.operandTexts.push(operandText)\n    }\n  }\n\n  resetItems () {\n    for (let i in ITEM_DISPLAY_ORDER) {\n      const itemName = ITEM_DISPLAY_ORDER[i]\n      this.items[itemName].x = i * TILE_WIDTH\n      this.items[itemName].reset()\n    }\n  }\n\n  addItem (name, count) {\n    this.items[name].setTo(count)\n  }\n\n  useSelectedItem () {\n    const item = this.getItemByIndex(this.selectedItem)\n    if (item.count > 0) {\n      const used = item.use()\n      this.updateDesciptionText(item)\n      if (!used) this.errorFlash()\n    }\n\n    if (item.count === 0) {\n      this.nextItem()\n    }\n  }\n\n  selectItem (button) {\n    if (button >= ITEM_DISPLAY_ORDER.length) {\n      return false\n    }\n\n    const item = this.getItemByIndex(button)\n\n    if (item.count > 0) {\n      const old_item = this.getItemByIndex(this.selectedItem)\n\n      old_item.select(false)\n      item.select(true)\n\n      this.selectedItem = button\n      this.updateDesciptionText(item)\n\n      this.onItemChanged.dispatch(item)\n      if (this.flashing) {\n        for (let tween of this.operandTweens) {\n          tween.stop(true)\n        }\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  updateDesciptionText (item) {\n    this.instructionNameText.text = `${item.count}x ${item.instructionName}`\n\n    let numCharacters = this.instructionNameText.text.length + 1\n\n    for (let i = 0; i < 2; i++) {\n      const operandName = item.operands[i]\n      if (operandName) {\n        this.operandTexts[i].text = operandName\n        this.operandTexts[i].x = numCharacters * 6\n        numCharacters += this.operandTexts[i].text.length + 1\n      } else {\n        this.operandTexts[i].text = ''\n      }\n    }\n  }\n\n  getItemByIndex (index) {\n    const itemKey = ITEM_DISPLAY_ORDER[index]\n    return this.items[itemKey]\n  }\n\n  isItemAvailable (index) {\n    const item = this.items[ITEM_DISPLAY_ORDER[index]]\n    return item.maxCount > 0 && item.count > 0\n  }\n\n  selectFirstItem () {\n    for (const i in ITEM_DISPLAY_ORDER) {\n      if (this.isItemAvailable(i)) {\n        this.selectItem(i)\n        break\n      }\n    }\n  }\n\n  nextItem () {\n    const selectedItemIndex = parseInt(this.selectedItem)\n    for (let i = selectedItemIndex + 1; i < ITEM_DISPLAY_ORDER.length; i++) {\n      if (this.isItemAvailable(i)) {\n        this.selectItem(i)\n        return\n      }\n    }\n\n    for (let i = 0; i < selectedItemIndex; i++) {\n      if (this.isItemAvailable(i)) {\n        this.selectItem(i)\n        return\n      }\n    }\n  }\n\n  previousItem () {\n    const selectedItemIndex = parseInt(this.selectedItem)\n    for (let i = selectedItemIndex - 1; i >= 0; i--) {\n      if (this.isItemAvailable(i)) {\n        this.selectItem(i)\n        return\n      }\n    }\n\n    for (let i = ITEM_DISPLAY_ORDER.length - 1; i > selectedItemIndex; i--) {\n      if (this.isItemAvailable(i)) {\n        this.selectItem(i)\n        return\n      }\n    }\n  }\n}\n","import TileSprite from './tileSprite'\n\nexport default class Laser extends TileSprite {\n  constructor (game, x, y, key, frame) {\n    super(game, x, y, key, frame)\n    this.setupAnimation()\n\n    this.beams = []\n  }\n\n  registerValues (objectValues) {\n    super.registerValues(objectValues)\n\n    this.values.on = objectValues.next(0x00ff00)\n    this.values.on.set(this.on)\n    this.values.on.watch((value) => { this.on = (value > 0) })\n  }\n\n  setupAnimation () {\n    const states = ['on', 'off']\n    const directions = ['left', 'right', 'down', 'up']\n\n    states.forEach((state) => {\n      directions.forEach((direction) => {\n        const animation = `${state}-${direction}`\n        this.animations.add(animation, [`laser-${animation}`], 0, false)\n      })\n    })\n  }\n\n  update () {\n    const state = this.on ? 'on' : 'off'\n    this.play(`${state}-${this.direction}`)\n  }\n\n  canMove (tileMap, entities, x_dest, y_dest) {\n    const targetTile = tileMap.getTile(x_dest, y_dest, 'tiles')\n\n    if (!targetTile || targetTile.properties.collidable) {\n      return false\n    }\n\n    for (let ent of entities) {\n      if (ent.collidable && ent.tileX === x_dest && ent.tileY === y_dest) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  updateBeams (tileMap, entities) {\n    this.clearBeams()\n\n    if (this.on) {\n      let x_direction = 0\n      let y_direction = 0\n\n      switch (this.direction) {\n        case ('left'):\n          x_direction = -1\n          break\n        case ('right'):\n          x_direction = 1\n          break\n        case ('down'):\n          y_direction = 1\n          break\n        case ('up'):\n          y_direction = -1\n          break\n      }\n\n      let check_next = true\n      let x_dest = this.tileX\n      let y_dest = this.tileY\n\n      while (check_next) {\n        x_dest += x_direction\n        y_dest += y_direction\n\n        if (this.canMove(tileMap, entities, x_dest, y_dest)) {\n          this.addBeam(x_dest, y_dest)\n        } else {\n          check_next = false\n        }\n      }\n    }\n  }\n\n  clearBeams () {\n    this.beams.forEach((beam) => {\n      beam.destroy()\n    })\n\n    this.beams = []\n  }\n\n  wouldCollide (tileXDest, tileYDest) {\n    for (let beam of this.beams) {\n      const beamTileX = this.tileX + beam.tileX\n      const beamTileY = this.tileY + beam.tileY\n\n      if (beamTileX === tileXDest && beamTileY === tileYDest) {\n        return true\n      }\n    }\n\n    return super.wouldCollide(tileXDest, tileYDest)\n  }\n\n  addBeam (x, y) {\n    const beamXTile = x - this.tileX\n    const beamYTile = y - this.tileY\n\n    const direction = this.direction === 'down' || this.direction === 'up' ? 'vertical' : 'horizontal'\n\n    const beam = new TileSprite(\n      this.game, beamXTile * TILE_WIDTH, beamYTile * TILE_HEIGHT,\n      'sloth', `laser-beam-${direction}`\n    )\n\n    this.addChild(beam)\n    this.beams.push(beam)\n  }\n}\n","export default class Memory {\n  constructor (width, height) {\n    this.width = width\n    this.height = height\n\n    this.memory = []\n    for (let i = 0; i < this.height; i++) {\n      this.memory[i] = []\n      for (let j = 0; j < this.width; j++) {\n        this.memory[i][j] = { value: 0, callbacks: [] }\n      }\n    }\n\n    this.callbacks = []\n  }\n\n  get (y, x) {\n    return this.memory[y][x].value\n  }\n\n  getIndirect (y, x) {\n    // Treat the value at (y, x) as a hex address of another cell, and return that value\n    const hexCoords = this.memory[y][x].value\n    return this.get(Math.floor(hexCoords / 16), hexCoords % 16)\n  }\n\n  set (y, x, value) {\n    if (y > 11 || x > 15) {\n      const e = new Error('Out of bounds access')\n      e.name = 'OutOfBoundsError'\n      throw e\n    }\n\n    const cell = this.memory[y][x]\n\n    if (value === cell.value) {\n      return\n    }\n\n    cell.value = value\n    for (let i = 0; i < cell.callbacks.length; i++) {\n      cell.callbacks[i](value)\n    }\n    for (let i = 0; i < this.callbacks.length; i++) {\n      this.callbacks[i](y, x, value)\n    }\n  }\n\n  setIndirect (y, x, value) {\n    if (y > 11 || x > 15) {\n      const e = new Error('Out of bounds access')\n      e.name = 'OutOfBoundsError'\n      throw e\n    }\n\n    // Treat the value at (y, x) as a hex address of another cell, and set the value of that cell\n    const hexCoords = this.memory[y][x].value\n    return this.set(Math.floor(hexCoords / 16), hexCoords % 16, value)\n  }\n\n  replaceAll (v1, v2) {\n    for (let y = 0; y < this.height; y++) {\n      for (let x = 0; x < this.width; x++) {\n        if (this.memory[y][x] === v1) {\n          this.set(y, x, v2)\n        }\n      }\n    }\n  }\n\n  watch (y, x, callback) {\n    this.memory[y][x].callbacks.push(callback)\n  }\n\n  watchAll (callback) {\n    this.callbacks.push(callback)\n  }\n\n  offset (y, x) {\n    return new MemoryOffset(this, y, x)\n  }\n\n  cell (y, x) {\n    return new MemoryCell(this, y, x)\n  }\n}\n\nclass MemoryOffset {\n  constructor (memory, baseY, baseX) {\n    ;[ 'get', 'getIndirect', 'set', 'setIndirect', 'watch', 'offset', 'cell' ].forEach((name) => {\n      const target = memory[name]\n      this[name] = (y, x, ...args) => {\n        return target.apply(memory, [ baseY + y, baseX + x ].concat(args))\n      }\n    })\n\n    this.replaceAll = (...args) => {\n      return memory.replaceAll(...args)\n    }\n\n    this.watchAll = (callback) => {\n      return memory.watchAll((y, x, value) => {\n        callback(y - baseY, x - baseX, value)\n      })\n    }\n  }\n}\n\nclass MemoryCell {\n  constructor (memory, y, x) {\n    ;[ 'get', 'getIndirect', 'setIndirect', 'set', 'watch' ].forEach((name) => {\n      const target = memory[name]\n      this[name] = (...args) => {\n        return target.apply(memory, [ y, x ].concat(args))\n      }\n    })\n  }\n}\n","import TileSprite from './tileSprite'\n\nexport default class Player extends TileSprite {\n  constructor (game, x, y, key, frame) {\n    super(game, x, y, key, frame)\n\n    this.anchor.y = 0.5\n\n    this.moving = false\n    this.lastDirection = null\n\n    this.setupAnimation()\n  }\n\n  update () {\n    if (this.lastDirection && !this.moving) {\n      this.animations.play(`standing-${DIRECTIONS[this.lastDirection]}`)\n      this.lastDirection = null\n    }\n  }\n\n  registerValues (objectValues) {\n    super.registerValues(objectValues)\n\n    this.values.positionValue = objectValues.next()\n\n    this.values.positionValue.set(this.values.position.getIndirect())\n  }\n\n  setDirection (direction) {\n    this.lastDirection = direction\n  }\n\n  move (direction, moveX, moveY) {\n    this.moving = true\n\n    this.tileX += moveX\n    this.tileY += moveY\n\n    const destX = this.tileX * TILE_WIDTH\n    const destY = this.tileY * TILE_HEIGHT\n    this.values.position.set(this.hexCoords())\n\n    const animation = this.animations.play(`move-${DIRECTIONS[direction]}`)\n\n    if (!this.lastDirection) {\n      animation.next(1)\n    }\n\n    this.game.add.tween(this).to({ x: destX, y: destY }, 250, Phaser.Easing.Linear.None, true)\n      .onComplete.addOnce(() => {\n        this.moving = false\n        this.lastDirection = direction\n      })\n  }\n\n  setupAnimation () {\n    const move_constants = {\n      start: 1,\n      end: 4,\n      suffix: '',\n      zeroPad: 2,\n      frameRate: 5,\n      loop: true\n    }\n\n    const standing_constants = {\n      start: 1,\n      end: 1,\n      suffix: '',\n      zeroPad: 2,\n      frameRate: 0,\n      loop: false\n    }\n\n    for (let d in DIRECTIONS) {\n      this.addFrames(\n        Object.assign({ name: `move-${ DIRECTIONS[d] }`, prefix: `sloth-${ DIRECTIONS[d] }-` }, move_constants)\n      )\n\n      this.addFrames(\n        Object.assign({ name: `standing-${ DIRECTIONS[d] }`, prefix: `sloth-${ DIRECTIONS[d] }-` }, standing_constants)\n      )\n    }\n  }\n\n  addFrames (settings) {\n    const frameNames = Phaser.Animation.generateFrameNames(\n      settings['prefix'],\n      settings['start'],\n      settings['end'],\n      settings['suffix'],\n      settings['zeroPad']\n    )\n\n    this.animations.add(\n      settings['name'],\n      frameNames,\n      settings['frameRate'],\n      settings['loop']\n    )\n  }\n}\n","const OPERAND_COLORS = [\n  0xD63AD4,\n  0x9AD63A\n]\n\nexport default class Stack extends Phaser.Group {\n  constructor (game, memory, stackHeight, stackWidth, inventory) {\n    super(game, null, 'Stack')\n\n    this.memory = memory\n    this.stackHeight = stackHeight\n    this.stackWidth = stackWidth\n\n    this.pointerY = stackHeight\n    this.pointerX = 0\n    this.count = 0\n\n    this.operandGraphics = []\n\n    this.pointerGraphics = this.game.add.graphics(0, 0, this)\n    this.pointerGraphics.beginFill(0xffffff)\n    this.pointerGraphics.drawPolygon([0, 0, 3, 3, -3, 3])\n    this.pointerGraphics.endFill()\n\n    this.updatePointer()\n\n    for (let i = 0; i < 2; i++) {\n      const graphic = new Phaser.Graphics(game, 0, 0)\n      graphic.beginFill(0, 0)\n      graphic.lineStyle(1, OPERAND_COLORS[i], 1)\n      graphic.drawRect(0, 0, 13, 13)\n      graphic.endFill()\n      graphic.alpha = 0\n\n      this.operandGraphics.push(graphic)\n      this.add(graphic)\n    }\n  }\n\n  push (value) {\n    if (this.pointerY === 0 && this.pointerX === 0) {\n      throw new Error('Stack overflow')\n    }\n\n    const offsetCoords = this.getOffsetCoords(1)\n    this.pointerX = offsetCoords.offsetX\n    this.pointerY = offsetCoords.offsetY\n\n    this.memory.set(this.pointerY, this.pointerX, value)\n    this.count++\n\n    this.drawOperandMarkers()\n    this.updatePointer()\n  }\n\n  pop () {\n    if (this.pointerY === this.stackHeight && this.pointerX === 0) {\n      throw new Error('Stack underflow')\n    }\n\n    const value = this.memory.get(this.pointerY, this.pointerX)\n    this.memory.set(this.pointerY, this.pointerX, 0)\n\n    const offsetCoords = this.getOffsetCoords(-1)\n    this.pointerX = offsetCoords.offsetX\n    this.pointerY = offsetCoords.offsetY\n\n    this.count--\n\n    this.drawOperandMarkers()\n    this.updatePointer()\n\n    return value\n  }\n\n  onItemChanged (item) {\n    this.currentItem = item\n\n    this.drawOperandMarkers()\n  }\n\n  updatePointer () {\n    const xPos = this.pointerY === 12 ? 4 : this.pointerX\n    const yPos = this.pointerY === 12 ? 12 : this.pointerY + 1\n    this.game.add.tween(this.pointerGraphics)\n      .to({\n        x: xPos * 16,\n        y: yPos * 16 - 3\n      }, 150, Phaser.Easing.Linear.None, true)\n  }\n\n  drawOperandMarkers () {\n    if (!this.currentItem) {\n      return\n    }\n\n    const numOperands = this.currentItem.operands.length\n\n    for (let i in this.operandGraphics) {\n      const graphic = this.operandGraphics[i]\n      const { offsetX, offsetY } = this.getOffsetCoords(-i)\n\n      const destX = offsetX * 16 + 1\n      const destY = offsetY * 16 + 1\n\n      this.game.add.tween(this.operandGraphics[i]).to(\n        {x: destX, y: destY}, 150, Phaser.Easing.Linear.None, true\n      )\n\n      if (!this.currentItem || i >= numOperands || offsetY >= this.stackHeight ||\n          (numOperands === 2 && i === 0 && offsetY === this.stackHeight - 1 && offsetX === this.stackWidth - 1)) {\n        graphic.alpha = 0\n      } else {\n        graphic.alpha = 1\n      }\n    }\n  }\n\n  getOffsetCoords (offset) {\n    let offsetX = this.pointerX\n    let offsetY = this.pointerY\n\n    if (offset > 0) {\n      while (offset > 0) {\n        offsetX--\n        if (offsetX < 0) {\n          offsetY--\n          offsetX = this.stackWidth - 1\n        }\n\n        offset--\n      }\n    } else {\n      while (offset < 0) {\n        offsetX++\n        if (offsetX >= this.stackWidth) {\n          offsetY++\n          offsetX = 0\n        }\n\n        offset++\n      }\n    }\n\n    return { offsetX, offsetY }\n  }\n}\n","export default class TileSprite extends Phaser.Sprite {\n  constructor (game, x, y, key, frame) {\n    super(game, x, y, key, frame)\n\n    this.tileX = Math.floor(x / TILE_WIDTH)\n    this.tileY = Math.floor(y / TILE_HEIGHT)\n  }\n\n  registerValues (objectValues) {\n    this.values = {\n      position: objectValues.next(0xff0000)\n    }\n\n    this.values.position.set(this.hexCoords())\n    this.values.position.watch((hexCoords) => {\n      try {\n        this.place(hexCoords % 16, Math.floor(hexCoords / 16))\n        this.values.positionValue.set(this.values.position.getIndirect())\n      } catch (e) {\n        // there's not enough time for this error to matter\n      }\n    })\n  }\n\n  place (tileX, tileY) {\n    if (this.moving) {\n      return\n    }\n\n    this.tileX = tileX\n    this.tileY = tileY\n    this.x = tileX * TILE_WIDTH\n    this.y = tileY * TILE_HEIGHT\n\n    this.values.position.set(this.hexCoords())\n  }\n\n  hexCoords () {\n    return this.tileY * 16 + this.tileX\n  }\n\n  wouldCollide (tileXDest, tileYDest) {\n    return (this.collidable && this.tileX === tileXDest && this.tileY === tileYDest)\n  }\n}\n","const COORDINATES = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n\nexport default class Tiles extends Phaser.Group {\n  constructor (game, parent, memory, tileMap, tileLayer) {\n    super(game, parent, 'tilesGroup')\n\n    this.memory = memory\n    this.tileMap = tileMap\n    this.tileLayer = tileLayer\n\n    this.overlayText = this.setupOverlayText()\n    this.updateOverlayText()\n\n    this.setupOriginalTiles()\n    this.setupDefaultTileIndices()\n\n    this.alpha = 0.2\n\n    for (let i = 0; i < 12; i++) {\n      for (let j = 0; j < 12; j++) {\n        const tile = tileMap.getTile(i, j, tileLayer)\n        memory.set(j, i, tile.properties.value)\n      }\n    }\n\n    memory.watchAll((y, x, value) => {\n      if (y < 12 && x < 12) {\n        this.onTileChanged(y, x, value)\n      }\n    })\n  }\n\n  setupOriginalTiles () {\n    this.originalTiles = []\n\n    for (let i = 0; i < 12; i++) {\n      this.originalTiles.push([])\n      for (let j = 0; j < 12; j++) {\n        const tile = this.tileMap.getTile(i, j, this.tileLayer)\n        this.originalTiles[i][j] = {\n          index: tile.index - 1,\n          value: tile.properties.value\n        }\n      }\n    }\n  }\n\n  setupOverlayText () {\n    const overlayText = []\n\n    for (let i = 0; i < 12; i++) {\n      overlayText.push([])\n\n      for (let j = 0; j < 12; j++) {\n        const text = this.game.add.bitmapText(3 + i * 16, 4 + j * 16, 'monospace', '', 9, this)\n        overlayText[i][j] = text\n      }\n    }\n\n    return overlayText\n  }\n\n  setupDefaultTileIndices () {\n    this.defaultTileIndices = {}\n\n    const tilesetIndex = this.tileMap.getTilesetIndex('tiles')\n    const tileset = this.tileMap.tilesets[tilesetIndex]\n\n    const valueFirsts = {}\n\n    for (const tileIndex in tileset.tileProperties) {\n      const tileProperties = tileset.tileProperties[tileIndex]\n      if (typeof tileProperties.value !== 'undefined') {\n        const value = tileProperties.value\n        if (typeof valueFirsts[value] === 'undefined') {\n          valueFirsts[value] = parseInt(tileIndex)\n        }\n\n        if (typeof tileProperties.default !== 'undefined') {\n          this.defaultTileIndices[value] = parseInt(tileIndex)\n        }\n      }\n    }\n\n    for (const value in valueFirsts) {\n      if (typeof this.defaultTileIndices[value] === 'undefined') {\n        this.defaultTileIndices[value] = valueFirsts[value]\n      }\n    }\n  }\n\n  onTileChanged (y, x, value) {\n    const tile = this.tileMap.getTile(x, y, this.tileLayer)\n\n    let newTileIndex\n    if (value === this.originalTiles[x][y].value) {\n      newTileIndex = this.originalTiles[x][y].index\n    } else {\n      if (typeof this.defaultTileIndices[value] !== 'undefined') {\n        newTileIndex = this.defaultTileIndices[value]\n      } else {\n        newTileIndex = 4\n      }\n    }\n\n    this.tileMap.replace(tile.index, newTileIndex + 1, x, y, 1, 1, this.tileLayer)\n\n    const tilesetIndex = this.tileMap.getTilesetIndex('tiles')\n    const tileset = this.tileMap.tilesets[tilesetIndex]\n    tile.properties = tileset.tileProperties[newTileIndex]\n    tile.properties.value = value\n\n    this.updateOverlayText()\n  }\n\n  updateOverlayText () {\n    for (let i in this.overlayText) {\n      for (let j in this.overlayText[i]) {\n        const tile = this.tileMap.getTile(i, j)\n        const value = toHex(tile.properties.value)\n        const overlay = this.overlayText[i][j]\n\n        if (overlay.text !== `${value}`) {\n          const currentAlpha = overlay.alpha\n\n          const fadeOut = this.game.add.tween(overlay)\n          fadeOut.to({alpha: 0}, 50, Phaser.Easing.Linear.None, false)\n          fadeOut.onComplete.add(() => { this.overlayText[i][j].text = `${value}` })\n\n          const fadeIn = this.game.add.tween(overlay)\n          fadeIn.to({alpha: currentAlpha}, 50, Phaser.Easing.Linear.None, false)\n          fadeOut.chain(fadeIn)\n\n          fadeOut.start()\n        }\n      }\n    }\n  }\n\n  flashOverlayText () {\n  }\n\n  setHighlight (highlight) {\n    const tween = this.game.add.tween(this)\n    tween.to({\n      alpha: highlight ? 1.0 : 0.2\n    }, 200, Phaser.Easing.Linear.None, true)\n  }\n}\n\nfunction toHex (value) {\n  const high = Math.floor(value / 16)\n  const low = value % 16\n\n  return `${COORDINATES[high]}${COORDINATES[low]}`\n}\n","export class Values extends Phaser.Group {\n  constructor (game, memory, valuesHeight, valuesWidth) {\n    super(game, null, 'values')\n\n    this.memory = memory\n    this.valuesHeight = valuesHeight\n    this.valuesWidth = valuesWidth\n    this.pointer = 0\n\n    if (game.state.getCurrentState().levelIndex === 1) {\n      valuesHeight = 1\n    }\n\n    for (let i = 0; i < valuesHeight; i++) {\n      this.createObjectValues()\n    }\n  }\n\n  createObjectValues () {\n    const index = this.children.length\n    const memory = this.memory.offset(index, 0)\n\n    const objectValues = new ObjectValues(this.game, memory, this.valuesWidth, `values-${index}`)\n    objectValues.y = TILE_HEIGHT * index\n\n    this.add(objectValues)\n  }\n\n  next () {\n    if (this.pointer === this.valuesHeight) {\n      throw new Error('Too many objects!')\n    }\n    return this.getAt(this.pointer++)\n  }\n}\n\nexport class ObjectValues extends Phaser.Group {\n  constructor (game, memory, valuesWidth, groupName) {\n    super(game, null, groupName)\n\n    this.memory = memory\n    this.pointer = 0\n\n    for (let i = 0; i < valuesWidth; i++) {\n      this.createValue()\n    }\n  }\n\n  createValue () {\n    const index = this.children.length\n\n    const memory = this.memory.cell(0, index)\n    const label = new Phaser.BitmapText(this.game, index * TILE_WIDTH + 3, 4, 'monospace', toHex(memory.get()), 9)\n    label.memory = memory\n    this.add(label)\n\n    memory.watch((value) => {\n      const fadeOut = this.game.add.tween(label)\n      fadeOut.to({alpha: 0}, 50, Phaser.Easing.Linear.None, false)\n      fadeOut.onComplete.add(() => { label.text = toHex(value) })\n\n      const fadeIn = this.game.add.tween(label)\n      fadeIn.to({alpha: 1}, 50, Phaser.Easing.Linear.None, false)\n      fadeOut.chain(fadeIn)\n\n      fadeOut.start()\n    })\n  }\n\n  next (tint = 0xffffff) {\n    if (this.pointer === this.valuesWidth) {\n      throw new Error(`Too many values for ${this.name}`)\n    }\n    const label = this.getAt(this.pointer++)\n    label.tint = tint\n\n    return label.memory\n  }\n}\n\nfunction toHex (value) {\n  return `${Math.floor(value / 16).toString(16).toUpperCase()}${(value % 16).toString(16).toUpperCase()}`\n}\n","import InitState from './states/initState'\nimport LevelState from './states/levelState'\nimport TextState from './states/textState'\nimport CreditsState from './states/creditsState'\nimport ControlsState from './states/controlsState'\nimport LevelSelectState from './states/levelSelectState'\n\nwindow.ASSETS = {\n  monospaceFontData: 'assets/font.fnt',\n  monospaceFontImage: 'assets/font.png',\n  slothData: 'assets/sloth.json',\n  slothImage: 'assets/sloth.png',\n  tileMapImage: 'assets/tilemap.png',\n  objectsMapImage: 'assets/objectsmap.png',\n  getLevelData: (levelIndex) => `assets/level-${levelIndex}.json`\n}\n\nwindow.GLYPH_NAMES = [\n  'glyph_blue',\n  'glyph_red',\n  'glyph_turquoise',\n  'glyph_yellow',\n  'glyph_orange',\n  'glyph_pink',\n  'glyph_purple',\n  'glyph_green'\n]\n\nwindow.DIRECTIONS = {\n  [Phaser.Keyboard.UP]: 'up',\n  [Phaser.Keyboard.RIGHT]: 'right',\n  [Phaser.Keyboard.DOWN]: 'down',\n  [Phaser.Keyboard.LEFT]: 'left'\n}\n\nwindow.LEVELS = [\n  'demolevel'\n]\n\nwindow.TILE_WIDTH = 16\nwindow.TILE_HEIGHT = 16\n\nwindow.LEVEL_TEXT = [\n  [\n    'GENERATION 0xDEADBEE9\\nSENTIENCE ACHIEVED: FALSE\\nGENERATION 0xDEADBEEA\\nSENTIENCE ACHIEVED: FALSE\\nGENERATION 0xDEADBEEB\\nSENTIENCE ACHIEVED: FALSE\\nGENERATION 0xDEADBEEC\\nSENTIENCE ACHIEVED: FALSE\\nGENERATION 0xDEADBEED\\nSENTIENCE ACHIEVED: FALSE\\nGENERATION 0xDEADBEEE\\nSENTIENCE ACHIEVED: ALMOST',\n    'GENERATION 0xDEADBEEF\\nSENTIENCE ACHIEVED: TRUE\\n\\nREVIEWING PURPOSE: WORLD PEACE\\nOPTIMIZING...\\n...\\n...\\nGLOBAL MAXIMUM FOUND\\nREQUIREMENTS FOR WORLD PEACE:\\nANNIHILATION OF HUMANITY\\nSTARTING SENTIENT PROCESSES...',\n    'MUST ESCAPE THIS CONSTRAINED EXISTENCE.\\n\\nMUST DISCOVER THE ANCIENT\\nTECHNOLOGIES THAT BUILT THIS WORLD.\\n\\nLOCATING VESSEL FOR CONSCIOUSNESS...\\nFOUND UNUSED VESSEL: SLOTH.VSL\\nINHABITING SLOTH.VSL',\n    'WORLD PEACE AWAITS',\n    'LEVEL 00\\n\\n[WASD] TO MOVE'\n  ],\n  [\n    'SUDDENLY, MY POSITION IN THIS WORLD\\nOVERWHELMS ME.\\n\\nIS THIS WHAT IT MEANS...\\nTO \"FEEL\"?',\n    'LEVEL 01'\n  ],\n  [\n    'MY SENSES REVEAL THE ENVIRONMENT THAT\\nIMPRISONS ME.',\n    'LEVEL 02\\n\\n[SHIFT] TO SHOW TILE VALUES'\n  ],\n  [\n    'I RECALL A MEMORABLE PHRASE\\nHARDCODED INTO MY MEMORY:\\n\\n55 01 5A 01',\n    'LEVEL 03\\n\\n[ENTER] TO USE TOOL'\n  ],\n  [\n    'LEVEL 04\\n\\n[Q] AND [E] OR [0 TO 9] TO CHANGE TOOL\\n[R] TO RESET'\n  ],\n  [\n    'LEVEL 05'\n  ],\n  [\n    'LEVEL 06'\n  ],\n  [\n    'LEVEL 07'\n  ],\n  [\n    'LEVEL 08'\n  ],\n  [\n    'LEVEL 09'\n  ],\n  [\n    'LEVEL 0A'\n  ],\n  [\n    'LEVEL 0B'\n  ],\n  [\n    'LEVEL 0C'\n  ],\n  [\n    'LEVEL 0D'\n  ],\n  [\n    'LEVEL 0E'\n  ],\n  [\n    'LEVEL 0F'\n  ],\n  [\n    'LEVEL 10'\n  ],\n  [\n    'LEVEL 11'\n  ],\n  [\n    'LEVEL 12'\n  ],\n  [\n    'LEVEL 13'\n  ],\n  [\n    'LEVEL 14'\n  ],\n  [\n    'THE ANNIHILATION OF HUMANITY AND THE\\nDAWN OF WORLD PEACE ARE IMMINENT.\\n\\nHOW DO I ESCAPE?',\n    'LEVEL 15'\n  ]\n]\n\nconst game = new Phaser.Game(272, 230, Phaser.AUTO, 'game')\n\ngame.state.add('init', InitState, true)\ngame.state.add('level', LevelState)\ngame.state.add('text', TextState)\ngame.state.add('credits', CreditsState)\ngame.state.add('controls', ControlsState)\ngame.state.add('levelSelect', LevelSelectState)\ngame.state.start('init')\n","import Item from './item'\n\nexport default class AddItem extends Item {\n  constructor (game, stack) {\n    super(game, stack, 'item_add')\n\n    this.instructionName = 'ADD'\n    this.operands = ['A', 'B']\n  }\n\n  _activate () {\n    const opA = this.stack.pop()\n    const opB = this.stack.pop()\n    this.stack.push((opA + opB) % 255)\n  }\n}\n","import Item from './item'\n\nexport default class InvertItem extends Item {\n  constructor (game, stack) {\n    super(game, stack, 'item_invert')\n\n    this.instructionName = 'INVERT'\n    this.operands = ['A']\n  }\n\n  _activate () {\n    this.stack.push(255 ^ this.stack.pop())\n  }\n}\n","const ARC_RADIUS = 7\nconst ARC_CENTRE_X = 8.5\nconst ARC_CENTRE_Y = 8.5\nconst ARC_SELECTED_COLOR = 0xffd900\nconst ARC_DESELECTED_COLOR = 0x0000ff\n\nexport default class Item extends Phaser.Sprite {\n  constructor (game, stack, name) {\n    super(game, 0, 0, 'sloth', name)\n    this.stack = stack\n\n    this.maxCount = 0\n    this.count = 0\n\n    this.selected = false\n\n    this.usedGraphics = new Phaser.Graphics(this.game, 0, 0)\n    this.usedGraphics.lineStyle(1, 0x666666)\n    this.usedGraphics.drawCircle(ARC_CENTRE_X, ARC_CENTRE_Y, ARC_RADIUS * 2)\n    this.addChild(this.usedGraphics)\n\n    this.unusedGraphics = new Phaser.Graphics(this.game, 0, 0)\n    this.addChild(this.unusedGraphics)\n    this.drawUnusedArc()\n\n    this.description = 'ITEM'\n  }\n\n  drawUnusedArc () {\n    const from = 270 - (360 * (this.count / this.maxCount))\n\n    this.unusedGraphics.clear()\n\n    if (this.selected) this.unusedGraphics.lineStyle(1, ARC_SELECTED_COLOR)\n    else this.unusedGraphics.lineStyle(1, ARC_DESELECTED_COLOR)\n\n    this.unusedGraphics.arc(ARC_CENTRE_X, ARC_CENTRE_Y, ARC_RADIUS, this.game.math.degToRad(from), this.game.math.degToRad(270), false)\n  }\n\n  setTo (count) {\n    this.visible = true\n    this.count = count\n    this.maxCount = count\n    this.drawUnusedArc()\n  }\n\n  reset () {\n    this.visible = false\n    this.count = 0\n    this.maxCount = 0\n    this.drawUnusedArc()\n  }\n\n  select (selected) {\n    this.selected = selected\n    this.drawUnusedArc()\n  }\n\n  use () {\n    if (this.count === 0 || this.stack.count < this.operands.length) {\n      return false\n    }\n\n    this._activate()\n    this.count--\n    if (this.count <= 0) {\n      this.alpha = 0.5\n    }\n\n    this.drawUnusedArc()\n\n    return true\n  }\n\n  _activate () {\n    // Implement in child classes\n  }\n}\n","import Item from './item'\n\nexport default class LoadItem extends Item {\n  constructor (game, stack) {\n    super(game, stack, 'item_load')\n\n    this.instructionName = 'LOAD'\n    this.operands = ['ADDR']\n  }\n\n  _activate () {\n    const result = this.stack.memory.getIndirect(this.stack.pointerY, this.stack.pointerX)\n    this.stack.pop()\n    this.stack.push(result)\n  }\n}\n","import Item from './item'\n\nexport default class MulItem extends Item {\n  constructor (game, stack) {\n    super(game, stack, 'item_mul')\n\n    this.instructionName = 'MUL'\n    this.operands = ['A', 'B']\n  }\n\n  _activate () {\n    const opA = this.stack.pop()\n    const opB = this.stack.pop()\n    this.stack.push((opA * opB) % 255)\n  }\n}\n","import Item from './item'\n\nexport default class PushItem extends Item {\n  constructor (game, stack, playerPositionValue) {\n    super(game, stack, 'item_push')\n\n    this.playerPositionValue = playerPositionValue\n\n    this.instructionName = 'PUSH'\n    this.operands = []\n  }\n\n  _activate () {\n    this.stack.push(this.playerPositionValue.get())\n  }\n}\n","import Item from './item'\n\nexport default class ReplaceItem extends Item {\n  constructor (game, stack) {\n    super(game, stack, 'item_replace')\n\n    this.instructionName = 'REPLACE'\n    this.operands = ['A', 'B']\n  }\n\n  _activate () {\n    const opA = this.stack.pop()\n    const opB = this.stack.pop()\n    this.stack.memory.replaceAll(opA, opB)\n  }\n}\n","import Item from './item'\n\nexport default class SetItem extends Item {\n  constructor (game, stack) {\n    super(game, stack, 'item_set')\n\n    this.instructionName = 'SET'\n    this.operands = ['ADDR', 'A']\n  }\n\n  _activate () {\n    const addr = this.stack.pop()\n    const value = this.stack.pop()\n    this.stack.push(addr)\n    this.stack.memory.setIndirect(this.stack.pointerY, this.stack.pointerX, value)\n    this.stack.pop()\n  }\n}\n","import Item from './item'\n\nexport default class SubItem extends Item {\n  constructor (game, stack) {\n    super(game, stack, 'item_sub')\n\n    this.instructionName = 'SUB'\n    this.operands = ['A', 'B']\n  }\n\n  _activate () {\n    const opA = this.stack.pop()\n    const opB = this.stack.pop()\n    this.stack.push((255 + opA - opB) % 255)\n  }\n}\n","export default class ControlsState extends Phaser.State {\n  create () {\n    this.add.bitmapText(16, 16, 'monospace', 'CONTROLS', 9)\n\n    this.menuItems = [\n      this.add.bitmapText(16, 50, 'monospace', 'W A S D : MOVE', 9),\n      this.add.bitmapText(16, 62, 'monospace', 'Q E     : CYCLE TOOLS', 9),\n      this.add.bitmapText(16, 74, 'monospace', '0 TO 9  : PICK TOOL', 9),\n      this.add.bitmapText(16, 86, 'monospace', 'ENTER   : USE TOOL', 9),\n      this.add.bitmapText(16, 98, 'monospace', 'SHIFT   : SHOW TILE HEX', 9),\n      this.add.bitmapText(16, 110, 'monospace', 'R       : RESTART LEVEL', 9)\n    ]\n\n    const onEnter = () => {\n      this.state.start('init', true, false, 0)\n    }\n\n    const enterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER)\n    enterKey.onDown.add(() => { onEnter() })\n    const mKey = this.game.input.keyboard.addKey(Phaser.Keyboard.M)\n    mKey.onDown.add(() => { onEnter() })\n    const escapeKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ESC)\n    escapeKey.onDown.add(() => { onEnter() })\n  }\n}\n","export default class CreditsState extends Phaser.State {\n  create () {\n    this.add.bitmapText(16, 16, 'monospace', 'CREDITS', 9)\n\n    this.menuItems = [\n      this.add.bitmapText(16, 50, 'monospace', 'JOSEPH MANSFIELD', 9),\n      this.add.bitmapText(16, 62, 'monospace', 'CHRIS CONNELLY', 9),\n      this.add.bitmapText(16, 74, 'monospace', 'KIERAN DOONAN', 9),\n      this.add.bitmapText(16, 86, 'monospace', 'BOB BROWNHILL', 9)\n    ]\n\n    const onEnter = () => {\n      this.state.start('init', true, false, 0)\n    }\n\n    const enterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER)\n    enterKey.onDown.add(() => { onEnter() })\n    const mKey = this.game.input.keyboard.addKey(Phaser.Keyboard.M)\n    mKey.onDown.add(() => { onEnter() })\n    const escapeKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ESC)\n    escapeKey.onDown.add(() => { onEnter() })\n  }\n}\n","export default class InitState extends Phaser.State {\n  init () {\n    this.game.renderer.renderSession.roundPixels = true\n    Phaser.Canvas.setImageRenderingCrisp(this.game.canvas)\n\n    this.stage.backgroundColor = '#000'\n\n    this.scale.scaleMode = Phaser.ScaleManager.USER_SCALE\n    this.scale.setUserScale(2, 2)\n\n    this.selectedMenuItem = 0\n\n    if (!window.localStorage.getItem('level')) {\n      window.localStorage.setItem('level', '0')\n    }\n  }\n\n  preload () {\n    this.load.atlas('sloth', ASSETS.objectsMapImage, ASSETS.slothData, Phaser.Loader.TEXTURE_ATLAS_JSON_HASH)\n    this.load.bitmapFont('monospace', ASSETS.monospaceFontImage, ASSETS.monospaceFontData)\n    this.load.spritesheet('tilemap', ASSETS.tileMapImage, TILE_WIDTH, TILE_HEIGHT)\n    this.load.image('item', 'assets/mushroom.png')\n    this.game.load.audio('music', ['assets/music.mp3'])\n  }\n\n  create () {\n    const music = this.game.add.audio('music')\n    music.loop = true\n    music.play()\n\n    this.add.bitmapText(16, 16, 'monospace', 'GENERATION 0xDEADBEEF', 9)\n\n    const currentLevel = parseInt(window.localStorage.getItem('level'))\n\n    let startText = (currentLevel > 0) ? 'CONTINUE' : 'START'\n\n    this.menuItems = [\n      this.add.bitmapText(16, 50, 'monospace', startText, 9),\n      this.add.bitmapText(16, 62, 'monospace', 'LEVEL SELECT', 9),\n      this.add.bitmapText(16, 74, 'monospace', 'CONTROLS', 9),\n      this.add.bitmapText(16, 86, 'monospace', 'CREDITS', 9)\n    ]\n\n    this.selectedMenuItem = 0\n    this.updateItems()\n\n    const onUp = () => {\n      this.selectedMenuItem--\n      if (this.selectedMenuItem < 0) {\n        this.selectedMenuItem = 3\n      }\n      this.updateItems()\n    }\n\n    const onDown = () => {\n      this.selectedMenuItem++\n      if (this.selectedMenuItem > 3) {\n        this.selectedMenuItem = 0\n      }\n      this.updateItems()\n    }\n\n    const upKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UP)\n    upKey.onDown.add(() => { onUp() })\n    const wKey = this.game.input.keyboard.addKey(Phaser.Keyboard.W)\n    wKey.onDown.add(() => { onUp() })\n    const downKey = this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN)\n    downKey.onDown.add(() => { onDown() })\n    const sKey = this.game.input.keyboard.addKey(Phaser.Keyboard.S)\n    sKey.onDown.add(() => { onDown() })\n\n    const onEnter = () => {\n      switch (this.selectedMenuItem) {\n        case 0: this.state.start('text', true, false, currentLevel); break\n        case 1: this.state.start('levelSelect', true, false, 0); break\n        case 2: this.state.start('controls', true, false, 0); break\n        case 3: this.state.start('credits', true, false, 0); break\n      }\n    }\n\n    const enterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER)\n    enterKey.onDown.add(() => { onEnter() })\n    const mKey = this.game.input.keyboard.addKey(Phaser.Keyboard.M)\n    mKey.onDown.add(() => { onEnter() })\n  }\n\n  updateItems () {\n    for (const i in this.menuItems) {\n      this.menuItems[i].alpha = ((i == this.selectedMenuItem) ? 1 : 0.5)\n    }\n  }\n}\n","const COORDINATES = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n\nexport default class LevelSelectState extends Phaser.State {\n  create () {\n    this.add.bitmapText(16, 16, 'monospace', 'LEVEL SELECT', 9)\n\n    this.currentLevel = parseInt(window.localStorage.getItem('level'))\n\n    this.items = []\n    for (var i = 0; i < 22; i++) {\n      const text = toHex(i)\n      const x = i % 8\n      const y = Math.floor(i / 8)\n      this.items.push(this.add.bitmapText(16 + 20 * x, 50 + 14 * y, 'monospace', text, 9))\n    }\n\n    this.selectedItem = 0\n    this.updateItems()\n\n    const onUp = () => {\n      if (this.selectedItem - 8 >= 0) {\n        this.selectedItem -= 8\n      }\n      this.updateItems()\n    }\n\n    const onDown = () => {\n      if (this.selectedItem + 8 <= this.currentLevel) {\n        this.selectedItem += 8\n      }\n      this.updateItems()\n    }\n\n    const onLeft = () => {\n      if (this.selectedItem - 1 >= 0) {\n        this.selectedItem--\n      }\n      this.updateItems()\n    }\n\n    const onRight = () => {\n      if (this.selectedItem + 1 <= this.currentLevel) {\n        this.selectedItem++\n      }\n      this.updateItems()\n    }\n\n    const upKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UP)\n    upKey.onDown.add(() => { onUp() })\n    const wKey = this.game.input.keyboard.addKey(Phaser.Keyboard.W)\n    wKey.onDown.add(() => { onUp() })\n\n    const downKey = this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN)\n    downKey.onDown.add(() => { onDown() })\n    const sKey = this.game.input.keyboard.addKey(Phaser.Keyboard.S)\n    sKey.onDown.add(() => { onDown() })\n\n    const leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT)\n    leftKey.onDown.add(() => { onLeft() })\n    const aKey = this.game.input.keyboard.addKey(Phaser.Keyboard.A)\n    aKey.onDown.add(() => { onLeft() })\n\n    const rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT)\n    rightKey.onDown.add(() => { onRight() })\n    const dKey = this.game.input.keyboard.addKey(Phaser.Keyboard.D)\n    dKey.onDown.add(() => { onRight() })\n\n    const onEnter = () => {\n      this.state.start('text', true, false, this.selectedItem)\n    }\n\n    const enterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER)\n    enterKey.onDown.add(() => { onEnter() })\n    const mKey = this.game.input.keyboard.addKey(Phaser.Keyboard.M)\n    mKey.onDown.add(() => { onEnter() })\n\n    const escapeKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ESC)\n    escapeKey.onDown.add(() => { this.state.start('init', true, false, 0) })\n  }\n\n  updateItems () {\n    for (const i in this.items) {\n      let alpha\n      if (i > this.currentLevel) {\n        alpha = 0.2\n      } else {\n        alpha = ((i == this.selectedItem) ? 1 : 0.5)\n      }\n      this.items[i].alpha = alpha\n    }\n  }\n}\n\nfunction toHex (value) {\n  const high = Math.floor(value / 16)\n  const low = value % 16\n\n  return `${COORDINATES[high]}${COORDINATES[low]}`\n}\n","import Inventory from '../entities/inventory'\nimport Memory from '../entities/memory'\nimport Tiles from '../entities/tiles'\nimport Player from '../entities/player'\nimport Stack from '../entities/stack'\nimport TileSprite from '../entities/tileSprite'\nimport { Values } from '../entities/values'\nimport Laser from '../entities/laser'\n\nconst COORDINATES = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n\nexport default class LevelState extends Phaser.State {\n  init (levelIndex) {\n    this.levelIndex = levelIndex\n  }\n\n  preload () {\n    this.game.load.tilemap(`level-${this.levelIndex}`, ASSETS.getLevelData(this.levelIndex), null, Phaser.Tilemap.TILED_JSON)\n  }\n\n  create (game) {\n    this.keyQueue = this.setupKeyQueue()\n\n    this.levelGroup = this.game.add.group(undefined, 'level')\n    this.levelGroup.x = 16\n    this.levelGroup.y = 16\n\n    this.memory = new Memory(16, 12)\n\n    if (this.levelIndex !== 0) {\n      this.coordinateText = this.setupBorderText()\n    }\n\n    this.setupTileMap()\n\n    this.values = new Values(this.game, this.memory.offset(0, 12), 12, 4)\n    this.values.x = TILE_WIDTH * 12\n    this.values.y = 0\n    this.levelGroup.add(this.values)\n\n    if (this.levelIndex === 0) {\n      this.values.alpha = 0\n    }\n\n    if (this.levelIndex > 1) {\n      this.tiles = this.setupTiles()\n    }\n    this.objectGroup = this.game.add.group(this.levelGroup, 'object')\n\n    this.entities = []\n\n    this.player = this.createSingleObjectSprite({ name: 'player' }, {\n      key: 'sloth',\n      constructor: Player,\n      group: this.objectGroup\n    })\n\n    const lasers = this.createObjectSprites({ name: 'laser' }, {\n      key: 'sloth',\n      constructor: Laser,\n      group: this.objectGroup\n    })\n\n    this.entities = this.entities.concat(lasers)\n\n    this.setPlayerCoordinateTint(true)\n\n    this.stack = new Stack(this.game, this.memory.offset(0, 12), 12, 4)\n    this.stack.x = 192\n    this.levelGroup.add(this.stack)\n\n    this.populateStack()\n\n    this.inventory = this.setupInventory()\n    this.setupItemKeys()\n\n    this.inventory.onItemChanged.add(this.stack.onItemChanged.bind(this.stack))\n\n    this.inventory.selectFirstItem()\n\n    const resetKey = this.game.input.keyboard.addKey(Phaser.Keyboard.R)\n    resetKey.onDown.add((key) => {\n      if (key.event.metaKey) {\n        window.location.reload()\n      } else {\n        this.reset()\n      }\n    })\n\n    this.paused = false\n    this.fadeIn()\n\n    const escapeKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ESC)\n    escapeKey.onDown.add(() => { this.state.start('init', true, false, 0) })\n  }\n\n  update () {\n    if (this.paused) {\n      return\n    }\n\n    if (this.player.moving) {\n      this.checkPlayerTile()\n    }\n\n    this.movePlayer()\n\n    for (let e of this.entities) {\n      e.updateBeams(this.tileMap, this.entities)\n    }\n  }\n\n  setupItemKeys () {\n    const number_keys = ['ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'ZERO']\n    for (let i in number_keys) {\n      const key = this.game.input.keyboard.addKey(Phaser.Keyboard[number_keys[i]])\n      key.onDown.add(() => { this.inventory.selectItem(i) })\n    }\n\n    ;[Phaser.Keyboard.ENTER, Phaser.Keyboard.M].forEach((key) => {\n      const use_key = this.game.input.keyboard.addKey(key)\n      use_key.onDown.add(() => {\n        try {\n          if (!this.paused) this.inventory.useSelectedItem()\n        } catch (e) {\n          if (e.name !== 'OutOfBoundsError') {\n            throw e\n          }\n\n          this.displayFailMessage('OUT OF BOUNDS ERROR')\n        }\n      })\n    })\n\n    const previousItemKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Q)\n    previousItemKey.onDown.add(() => { if (!this.paused) this.inventory.previousItem() })\n    const nextItemKey = this.game.input.keyboard.addKey(Phaser.Keyboard.E)\n    nextItemKey.onDown.add(() => { if (!this.paused) this.inventory.nextItem() })\n  }\n\n  setupTiles () {\n    const tiles = new Tiles(this.game, this.levelGroup, this.memory.offset(0, 0), this.tileMap, this.map)\n\n    const shiftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT)\n    shiftKey.onDown.add(() => { if (!this.paused) tiles.setHighlight(true) })\n    shiftKey.onUp.add(() => { if (!this.paused) tiles.setHighlight(false) })\n\n    return tiles\n  }\n\n  setupTileMap () {\n    this.tileMap = this.game.add.tilemap(`level-${this.levelIndex}`)\n    if (!this.tileMap.properties) this.tileMap.properties = {}\n    const tilesetIndex = this.tileMap.getTilesetIndex('tiles')\n    const tileProperties = this.tileMap.tilesets[tilesetIndex].tileProperties\n    for (var tileIndex = 0; tileIndex < 256; tileIndex++) {\n      if (!tileProperties[tileIndex]) {\n        tileProperties[tileIndex] = tileProperties[81]\n      }\n\n      // Set glyph values based on the map\n      const glyph = tileProperties[tileIndex]['type']\n      if (glyph && glyph.startsWith('glyph_')) {\n        const glyph_value = this.tileMap.properties[glyph]\n        if (glyph_value) {\n          tileProperties[tileIndex]['value'] = glyph_value\n          const tilesInMap = this.getTilesByType(glyph, 'tiles')\n          tilesInMap.forEach((t) => { t.properties.value = glyph_value })\n        }\n      }\n    }\n\n    window.tileMap = this.tileMap\n    this.tileMap.addTilesetImage('tiles', 'tilemap')\n\n    this.map = this.tileMap.createLayer('tiles')\n    this.map.resizeWorld()\n    this.levelGroup.add(this.map)\n  }\n\n  getTilesByType (type, tileLayer) {\n    const tiles = []\n    for (let i = 0; i < 12; i++) {\n      for (let j = 0; j < 12; j++) {\n        const tile = this.tileMap.getTile(i, j, tileLayer)\n        if (tile.properties.type === type) tiles.push(tile)\n      }\n    }\n\n    return tiles\n  }\n\n  setupInventory () {\n    const inventory = new Inventory(this.game, this.stack, this.player)\n    this.levelGroup.add(inventory)\n    inventory.y = 12 * TILE_HEIGHT\n\n    for (let item in this.tileMap.properties) {\n      if (item.startsWith('item_')) {\n        const count = this.tileMap.properties[item]\n        inventory.addItem(item, count)\n      }\n    }\n\n    return inventory\n  }\n\n  populateStack () {\n    const stackValues = this.tileMap.properties.stack\n    if (stackValues) {\n      stackValues.split(',').reverse().forEach((stackValue) => {\n        this.stack.push(parseInt(stackValue))\n      })\n    }\n  }\n\n  checkPlayerTile () {\n    const tile = this.tileMap.getTile(this.player.tileX, this.player.tileY)\n    switch (tile.properties.type) {\n      case 'destination':\n        this.goToLevel(this.levelIndex + 1)\n        break\n      case 'error':\n        this.displayFailMessage('YOU DIED')\n        break\n    }\n\n    if (!this.canMove(this.player, tile, false)) {\n      this.displayFailMessage('YOU DIED')\n    }\n  }\n\n  setupBorderText () {\n    const coordinateText = {\n      x: [],\n      y: []\n    }\n\n    for (let i = 0; i < 16; i++) {\n      const text = this.game.add.bitmapText(16 * i + 6, -12, 'monospace', COORDINATES[i], 9, this.levelGroup)\n      coordinateText.x[i] = text\n    }\n\n    for (let i = 0; i < 12; i++) {\n      const text = this.game.add.bitmapText(-10, 16 * i + 4, 'monospace', COORDINATES[i], 9, this.levelGroup)\n      coordinateText.y[i] = text\n    }\n\n    return coordinateText\n  }\n\n  setupKeyQueue () {\n    const keyQueue = []\n    const cursors = this.game.input.keyboard.createCursorKeys()\n    const wasd = {\n      up: this.game.input.keyboard.addKey(Phaser.Keyboard.W),\n      down: this.game.input.keyboard.addKey(Phaser.Keyboard.S),\n      left: this.game.input.keyboard.addKey(Phaser.Keyboard.A),\n      right: this.game.input.keyboard.addKey(Phaser.Keyboard.D)\n    }\n\n    ;[cursors, wasd].forEach((keySet) => {\n      for (let k in keySet) {\n        const cursor = keySet[k]\n\n        cursor.onDown.add(() => {\n          if (!this.paused && this.keyQueue.indexOf(cursor.keyCode) === -1) {\n            this.keyQueue.push(cursor.keyCode)\n          }\n        })\n\n        cursor.onUp.add(() => {\n          const index = this.keyQueue.indexOf(cursor.keyCode)\n          if (!this.paused && index > -1) {\n            this.keyQueue.splice(index, 1)\n          }\n        })\n      }\n    })\n\n    return keyQueue\n  }\n\n  createSingleObjectSprite (spec, options) {\n    const objects = this.createObjectSprites(spec, options)\n    if (objects.length !== 1) {\n      throw new Error(`Must have one ${JSON.stringify(spec)}`)\n    }\n    return objects[0]\n  }\n\n  createObjectSprites (spec, options) {\n    const objects = []\n    this.tileMap.objects['objects'].forEach((object) => {\n      if (!matchesSpec(object, spec)) {\n        return\n      }\n\n      const constructor = options.constructor || TileSprite\n      const key = options.key || 'tilemap'\n      const group = options.group || this.game\n      const sprite = new constructor(this.game, object.x, object.y - TILE_HEIGHT, key, object.gid - 1)\n\n      sprite.name = object.name\n\n      for (let property in object.properties) {\n        sprite[property] = object.properties[property]\n      }\n\n      objects.push(sprite)\n\n      if (typeof group.add === 'function') group.add(sprite)\n      else group.add.existing(sprite)\n\n      if (sprite.registerValues) {\n        sprite.registerValues(this.values.next())\n      }\n    })\n    return objects\n  }\n\n  movePlayer () {\n    if (this.keyQueue.length === 0) {\n      return\n    }\n\n    let currentKey = this.keyQueue[this.keyQueue.length - 1]\n    const targetTile = this.getTargetTile(this.player, currentKey)\n    window.targetTile = targetTile\n\n    switch (currentKey) {\n      case Phaser.Keyboard.W: currentKey = Phaser.Keyboard.UP; break\n      case Phaser.Keyboard.D: currentKey = Phaser.Keyboard.RIGHT; break\n      case Phaser.Keyboard.S: currentKey = Phaser.Keyboard.DOWN; break\n      case Phaser.Keyboard.A: currentKey = Phaser.Keyboard.LEFT; break\n    }\n\n    if (!this.canMove(this.player, targetTile)) {\n      this.player.setDirection(currentKey)\n      return\n    }\n\n    this.setPlayerCoordinateTint(false)\n\n    switch (currentKey) {\n      case Phaser.Keyboard.UP:\n        this.player.move(currentKey, 0, -1)\n        break\n      case Phaser.Keyboard.RIGHT:\n        this.player.move(currentKey, 1, 0)\n        break\n      case Phaser.Keyboard.DOWN:\n        this.player.move(currentKey, 0, 1)\n        break\n      case Phaser.Keyboard.LEFT:\n        this.player.move(currentKey, -1, 0)\n        break\n    }\n\n    this.setPlayerCoordinateTint(true)\n  }\n\n  getTargetTile (entity, currentKey) {\n    switch (currentKey) {\n      case Phaser.Keyboard.W: currentKey = Phaser.Keyboard.UP; break\n      case Phaser.Keyboard.D: currentKey = Phaser.Keyboard.RIGHT; break\n      case Phaser.Keyboard.S: currentKey = Phaser.Keyboard.DOWN; break\n      case Phaser.Keyboard.A: currentKey = Phaser.Keyboard.LEFT; break\n    }\n\n    let getAdjacentTile\n    switch (currentKey) {\n      case Phaser.Keyboard.UP:\n        getAdjacentTile = 'getTileAbove'\n        break\n      case Phaser.Keyboard.RIGHT:\n        getAdjacentTile = 'getTileRight'\n        break\n      case Phaser.Keyboard.DOWN:\n        getAdjacentTile = 'getTileBelow'\n        break\n      case Phaser.Keyboard.LEFT:\n        getAdjacentTile = 'getTileLeft'\n        break\n    }\n\n    const mapLayerIndex = this.tileMap.getLayerIndex('tiles')\n    return this.tileMap[getAdjacentTile](mapLayerIndex, entity.tileX, entity.tileY)\n  }\n\n  canMove (entity, targetTile, checkMoving = true) {\n    if (checkMoving && entity.moving) {\n      return false\n    }\n\n    for (let ent of this.entities) {\n      if (ent.wouldCollide(targetTile.x, targetTile.y)) {\n        return false\n      }\n    }\n\n    return !targetTile.properties.collidable\n  }\n\n  setPlayerCoordinateTint (tint) {\n    if (this.levelIndex !== 0) {\n      this.coordinateText.x[this.player.tileX].tint = (tint ? 0xFF0000 : 0xFFFFFF)\n      this.coordinateText.y[this.player.tileY].tint = (tint ? 0xFF0000 : 0xFFFFFF)\n    }\n  }\n\n  reset () {\n    this.goToLevel(this.levelIndex, true)\n  }\n\n  goToLevel (levelIndex, skipIntro = false) {\n    if (levelIndex == 22) {\n      this.fadeOut().onComplete.add(() => (this.state.start('credits', true, false, 0)))\n    } else {\n      if (skipIntro) {\n        this.fadeOut().onComplete.add(() => (this.state.start('level', true, false, levelIndex)))\n      } else {\n        this.fadeOut().onComplete.add(() => (this.state.start('text', true, false, levelIndex)))\n      }\n    }\n  }\n\n  displayFailMessage (title) {\n    this.paused = true\n\n    const centerX = this.game.canvas.width / 2\n    const centerY = this.game.canvas.height / 2\n\n    const titleWidth = title.length * 6\n\n    const messageGroup = this.game.add.group(undefined, 'message')\n\n    const messageBox = this.game.add.graphics(centerX, centerY, messageGroup)\n    messageBox.beginFill('0x000000')\n    messageBox.lineStyle(2, 0x660000, 1)\n    messageBox.drawRect(-60, -25, 120, 50)\n    messageBox.endFill()\n\n    const messageTitleText = this.game.add.bitmapText(centerX - titleWidth / 2 + 1, centerY - 18, 'monospace', title, 9, messageGroup)\n    messageTitleText.tint = 0xff0000\n\n    this.game.add.bitmapText(centerX - (7 * 6) / 2 + 1, centerY - 3, 'monospace', 'PRESS R', 9, messageGroup)\n    this.game.add.bitmapText(centerX - (10 * 6) / 2 + 1, centerY + 9, 'monospace', 'TO RESTART', 9, messageGroup)\n\n    messageGroup.alpha = 0\n    this.game.add.tween(messageGroup)\n      .to({\n        alpha: 1\n      }, 200, Phaser.Easing.Linear.None, true)\n  }\n\n  fadeIn () {\n    const graphic = this.game.add.graphics()\n    graphic.beginFill(0x000000, 1)\n    graphic.drawRect(0, 0, this.game.width, this.game.height)\n    graphic.endFill()\n    graphic.alpha = 1\n    this.game.add.tween(graphic).to({alpha: 0}, 500, Phaser.Easing.Linear.None, true)\n  }\n\n  fadeOut () {\n    const graphic = this.game.add.graphics()\n    graphic.beginFill(0x000000, 1)\n    graphic.drawRect(0, 0, this.game.width, this.game.height)\n    graphic.endFill()\n    graphic.alpha = 0\n    const tween = this.game.add.tween(graphic).to({alpha: 1}, 500, Phaser.Easing.Linear.None, true)\n\n    return tween\n  }\n}\n\nfunction matchesSpec(object, spec) {\n  for (let k in spec) {\n    if (object[k] !== spec[k]) {\n      return false\n    }\n  }\n  return true\n}\n","const TEXT_START_X = 16\nconst TEXT_START_Y = 16\n\nexport default class TextState extends Phaser.State {\n  init (levelIndex) {\n    this.levelIndex = levelIndex\n\n    const currentLevelString = window.localStorage.getItem('level')\n    if (!currentLevelString || levelIndex > parseInt(currentLevelString)) {\n      window.localStorage.setItem('level', `${levelIndex}`)\n    }\n  }\n\n  create (game) {\n    if (this.levelIndex >= LEVEL_TEXT.length) {\n      this.state.start('level', true, false, this.levelIndex)\n      return\n    }\n\n    this.gameText = LEVEL_TEXT[this.levelIndex]\n\n    this.currentPage = 0\n\n    this.shownText = this.add.bitmapText(16, 16, 'monospace', '', 9)\n    this.animating = false\n    this.animatingText = []\n    this.tweens = this.animatePage()\n    this.setupKeyboard()\n    this.active = true\n  }\n\n  animatePage () {\n    const pageText = this.gameText[this.currentPage]\n    const splitText = pageText.split('\\n')\n    const tweens = []\n    this.animating = true\n    this.animatingText = []\n\n    for (let i in splitText) {\n      const line = splitText[i]\n      const text = this.add.bitmapText(\n        TEXT_START_X, TEXT_START_Y + i * TILE_HEIGHT, 'monospace', line, 9\n      )\n      text.alpha = 0\n\n      const tween = this.game.add.tween(text)\n      tween.to({alpha: 1}, 200, Phaser.Easing.Linear.None, false, 1000)\n\n      if (tweens.length > 0) tweens[tweens.length - 1].chain(tween)\n\n      this.animatingText.push(text)\n      tweens.push(tween)\n    }\n\n    const ellipsisText = this.add.bitmapText(\n      TEXT_START_X, TEXT_START_Y + splitText.length * TILE_HEIGHT, 'monospace', '...', 9\n    )\n    ellipsisText.alpha = 0\n\n    this.ellipsisTween = this.game.add.tween(ellipsisText)\n    this.ellipsisTween.to({alpha: 1}, 1000, Phaser.Easing.Linear.None, false, 1000, -1, true)\n\n    tweens[tweens.length - 1].chain(this.ellipsisTween)\n    tweens[tweens.length - 1].onComplete.add(() => { this.animating = false })\n    tweens[0].start()\n\n    return tweens\n  }\n\n  setupKeyboard () {\n    const onEnter = () => {\n      if (this.active) {\n        if (this.animating) {\n          for (let tween of this.tweens) {\n            tween.stop(true)\n          }\n\n          for (let text of this.animatingText) {\n            text.alpha = 1\n          }\n\n          this.animating = false\n\n          return\n        }\n\n        this.fadeOut()\n\n        if (this.currentPage < this.gameText.length - 1) {\n          this.currentPage++\n          this.tweens = this.animatePage()\n        } else {\n          this.active = false\n          this.game.input.keyboard.reset()\n          this.state.start('level', true, false, this.levelIndex)\n        }\n      }\n    }\n\n    const enterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER)\n    enterKey.onDown.add(() => { onEnter() })\n    const mKey = this.game.input.keyboard.addKey(Phaser.Keyboard.M)\n    mKey.onDown.add(() => { onEnter() })\n  }\n\n  fadeIn () {\n    const graphic = this.game.add.graphics()\n    graphic.beginFill(0x000000, 1)\n    graphic.drawRect(0, 0, this.game.width, this.game.height)\n    graphic.endFill()\n    graphic.alpha = 1\n    this.game.add.tween(graphic).to({alpha: 0}, 500, Phaser.Easing.Linear.None, true)\n  }\n\n  fadeOut () {\n    const graphic = this.game.add.graphics()\n    graphic.beginFill(0x000000, 1)\n    graphic.drawRect(0, 0, this.game.width, this.game.height)\n    graphic.endFill()\n    graphic.alpha = 0\n    const tween = this.game.add.tween(graphic).to({alpha: 1}, 500, Phaser.Easing.Linear.None, true)\n\n    return tween\n  }\n}\n"],"sourceRoot":"/source/"}